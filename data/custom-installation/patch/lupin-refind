#! /bin/sh
set -e

# grub-mkconfig helper script which creates a rEFInd configuration 
# for loopback mounts. Some of this is based on 10_linux and 10_lupin.
#
# GRUB is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# GRUB is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GRUB.  If not, see <http://www.gnu.org/licenses/>.

prefix="/usr"
exec_prefix="${prefix}"
datarootdir="${prefix}/share"

. "${datarootdir}/grub/grub-mkconfig_lib"

export TEXTDOMAIN=grub
export TEXTDOMAINDIR="${datarootdir}/locale"

if [ "x${GRUB_DISTRIBUTOR}" = "x" ] ; then
  OS=GNU/Linux
else
  OS="${GRUB_DISTRIBUTOR}"
fi
OS_description=`lsb_release -d | cut -f2`

case ${GRUB_DEVICE} in
  /dev/loop/*|/dev/loop[0-9])
    loop_file=`losetup ${GRUB_DEVICE} | sed -e "s/^[^(]*(\([^)]\+\)).*/\1/"`
  ;;
esac

# Is the root filesystem loop-mounted from a file on another filesystem?
if [ "x${loop_file}" = x ] || [ ! -f "${loop_file}" ]; then
  exit 0
fi
dev_mountpoint="$(awk '"'${loop_file}'" ~ "^"$2 && $2 != "/" { print $1";"$2 }' /proc/mounts | tail -n1)"
host_device="${dev_mountpoint%;*}"
host_mountpoint="${dev_mountpoint#*;}"
if [ "x${host_device}" = x ]; then
  exit 0
fi
loop_file_relative="${loop_file#$host_mountpoint}"
loop_file_bootdir="${loop_file_relative%\/*}/boot"
host_install_dir="${loop_file_relative%\/disks*}" 

# Create a directory for boot files if it does not exist
mkdir -p ${host_mountpoint}${loop_file_bootdir}

refind_efi_dir="/boot/efi/EFI${host_install_dir}/wubildr"
if [ -d ${refind_efi_dir} ]; then
  refind_conf="${refind_efi_dir}/refind-wubi.conf"
else   
  refind_conf="${host_mountpoint}${loop_file_bootdir}/refind.conf"
fi

for i in ${host_mountpoint}${host_install_dir}/*.png ; do
  if test -e "${i}" ; then 
    icon_file_name="${i#$host_mountpoint}"
    break
 fi
done;

cat << EOF > ${refind_conf}
#
# DO NOT EDIT THIS FILE
#
# It is automatically generated by /etc/grub.d/10_lupin_refind
#
EOF

# Device containing the host filesystem.
host_device_uuid="`${grub_probe} --device "${host_device}" --target=fs_uuid 2> /dev/null`" || true

if [ "x${host_device_uuid}" = "x" ] || [ "x${GRUB_DISABLE_LINUX_UUID}" = "xtrue" ] \
    || ! test -e "/dev/disk/by-uuid/${host_device_uuid}" \
    || [ "`${grub_probe} -t abstraction --device ${host_device} | sed -e 's,.*\(lvm\).*,\1,'`" = "lvm"  ] ; then
  LINUX_HOST_DEVICE=${host_device}
else
  LINUX_HOST_DEVICE=UUID=${host_device_uuid}
fi

# partuuid of host partition
host_device_partuuid=$(ls -l /dev/disk/by-partuuid | grep "${host_device#\/dev}" | awk '{ print $9 }')

GRUBFS="`${grub_probe} --device ${GRUB_DEVICE} --target=fs 2>/dev/null || true`"

if [ x"$GRUBFS" = x ]; then
    GRUBFS="$(stat -f --printf=%T / || true)"
fi

case x"$GRUBFS" in
    xbtrfs)
	rootsubvol="`make_system_path_relative_to_its_root /`"
	rootsubvol="${rootsubvol#/}"
	if [ "x${rootsubvol}" != x ]; then
	    GRUB_CMDLINE_LINUX="rootflags=subvol=${rootsubvol} ${GRUB_CMDLINE_LINUX}"
	fi;;
    xzfs)
	rpool=`${grub_probe} --device ${GRUB_DEVICE} --target=fs_label 2>/dev/null || true`
	bootfs="`make_system_path_relative_to_its_root / | sed -e "s,@$,,"`"
	LINUX_ROOT_DEVICE="ZFS=${rpool}${bootfs}"
	;;
esac

for word in $GRUB_CMDLINE_LINUX_DEFAULT; do
  if [ "$word" = splash ]; then
    GRUB_CMDLINE_LINUX_DEFAULT="$GRUB_CMDLINE_LINUX_DEFAULT vt.handoff=7"
  fi
done

# add crashkernel option if we have the required tools
if [ -x "/usr/bin/makedumpfile" ] && [ -x "/sbin/kexec" ]; then
    GRUB_CMDLINE_EXTRA="$GRUB_CMDLINE_EXTRA crashkernel=384M-2G:64M,2G-:128M"
fi

lupin_entry ()
{
  os="$1"
  version="$2"
  type="$3"
  args="$4"

  if [ x$type != xsimple ] ; then
      case $type in
	  recovery)
	      title="$(gettext_printf "%s, with Linux %s" "${os}" "${version} ($(gettext "${GRUB_RECOVERY_TITLE}")")"")" ;;
	  *)
	      title="$(gettext_printf "%s, with Linux %s" "${os}" "${version}")" ;;
      esac
      echo "submenuentry \"$(echo "$title" | grub_quote)\" {" | sed "s/^/$submenu_indentation/" \
           >> ${refind_conf}
      sed "s/^/$submenu_indentation/" << EOF >> ${refind_conf}
	loader	${loop_file_bootdir}/${basename}
	options	"root=${LINUX_HOST_DEVICE} loop=${loop_file_relative} ro ${args}"
EOF
      if test -n "${initrd}" ; then
           sed "s/^/$submenu_indentation/" << EOF >> ${refind_conf} 
	initrd	${loop_file_bootdir}/${initrd}
}
EOF
      fi
  else
      echo "menuentry \"$(echo "${os}" | grub_quote)\" {" | sed "s/^/$submenu_indentation/" \
           >> ${refind_conf}
      sed "s/^/$submenu_indentation/" << EOF >> ${refind_conf}
	volume	${host_device_partuuid}
	icon	${icon_file_name}
	loader	${loop_file_bootdir}/vmlinuz
	options	"root=${LINUX_HOST_DEVICE} loop=${loop_file_relative} ro ${args}"
	initrd	${loop_file_bootdir}/initrd.img
EOF
  fi
}

machine=`uname -m`
case "x$machine" in
    xi?86 | xx86_64)
	list=`for i in /boot/vmlinuz-* /vmlinuz-* /boot/kernel-* ; do
                  if grub_file_is_not_garbage "$i" ; then echo -n "$i " ; fi
              done` ;;
    *) 
	list=`for i in /boot/vmlinuz-* /boot/vmlinux-* /vmlinuz-* /vmlinux-* /boot/kernel-* ; do
                  if grub_file_is_not_garbage "$i" ; then echo -n "$i " ; fi
	     done` ;;
esac

case "$machine" in
    i?86) GENKERNEL_ARCH="x86" ;;
    mips|mips64) GENKERNEL_ARCH="mips" ;;
    mipsel|mips64el) GENKERNEL_ARCH="mipsel" ;;
    arm*) GENKERNEL_ARCH="arm" ;;
    *) GENKERNEL_ARCH="$machine" ;;
esac

# remove old boot files
for i in "${host_mountpoint}${loop_file_bootdir}/vmlinuz-*" \
         "${host_mountpoint}${loop_file_bootdir}/kernel-*" \
         "${host_mountpoint}${loop_file_bootdir}/init*" ; do
         if grub_file_is_not_garbage "$i" ; then 
            rm ${i} 
         fi  
done
 
# Extra indentation to add to menu entries in a submenu. We're not in a submenu
# yet, so it's empty. In a submenu it will be equal to '\t' (one tab).
submenu_indentation=""

is_first_entry=true
while [ "x$list" != "x" ] ; do
  linux=`version_find_latest $list`
  basename=`basename $linux`
  dirname=`dirname $linux`
  rel_dirname=`make_system_path_relative_to_its_root $dirname`
  version=`echo $basename | sed -e "s,^[^0-9]*-,,g"`
  alt_version=`echo $version | sed -e "s,\.old$,,g"`
  alt_version=`echo $alt_version | sed -e "s,\.efi.signed$,,g"`
  linux_root_device_thisversion="${LINUX_ROOT_DEVICE}"

  initrd=
  for i in "initrd.img-${version}" "initrd-${version}.img" "initrd-${version}.gz" \
	   "initrd-${version}" "initramfs-${version}.img" \
	   "initrd.img-${alt_version}" "initrd-${alt_version}.img" \
	   "initrd-${alt_version}" "initramfs-${alt_version}.img" \
	   "initramfs-genkernel-${version}" \
	   "initramfs-genkernel-${alt_version}" \
	   "initramfs-genkernel-${GENKERNEL_ARCH}-${version}" \
	   "initramfs-genkernel-${GENKERNEL_ARCH}-${alt_version}"; do
    if test -e "${dirname}/${i}" ; then
      initrd="$i"
      break
    fi
  done

  config=
  for i in "${dirname}/config-${version}" "${dirname}/config-${alt_version}" "/etc/kernels/kernel-config-${version}" ; do
    if test -e "${i}" ; then
      config="${i}"
      break
    fi
  done

  initramfs=
  if test -n "${config}" ; then
      initramfs=`grep CONFIG_INITRAMFS_SOURCE= "${config}" | cut -f2 -d= | tr -d \"`
  fi

  if ! test -n "${initrd}" ; then
    # None of this can work without an initrd, so don't even bother.
    list=`echo $list | tr ' ' '\n' | grep -vx $linux | tr '\n' ' '`
    continue
  fi

  # copy boot files 
  cp -u ${rel_dirname}/${basename} ${host_mountpoint}${loop_file_bootdir}/${basename}
  gettext_printf "Found linux image: %s\n" "${host_mountpoint}${loop_file_bootdir}/${basename}" >&2
  cp -u ${rel_dirname}/${initrd} ${host_mountpoint}${loop_file_bootdir}/${initrd}
  gettext_printf "Found initrd image: %s\n" "${host_mountpoint}${loop_file_bootdir}/${initrd}" >&2

  if [ "x$is_first_entry" = xtrue ]; then
    lupin_entry "${OS_description}" "${version}" simple \
    "${GRUB_CMDLINE_LINUX} ${GRUB_CMDLINE_EXTRA} ${GRUB_CMDLINE_LINUX_DEFAULT}"

    cp -u ${rel_dirname}/${basename} ${host_mountpoint}${loop_file_bootdir}/vmlinuz
    cp -u ${rel_dirname}/${initrd} ${host_mountpoint}${loop_file_bootdir}/initrd.img

    submenu_indentation="\t"
  fi

  lupin_entry "${OS}" "${version}" advanced \
              "${GRUB_CMDLINE_LINUX} ${GRUB_CMDLINE_EXTRA} ${GRUB_CMDLINE_LINUX_DEFAULT}"
  if [ "x${GRUB_DISABLE_RECOVERY}" != "xtrue" ]; then
    if [ -x /lib/recovery-mode/recovery-menu ]; then
      lupin_entry "${OS}" "${version}" recovery \
		  "recovery nomodeset ${GRUB_CMDLINE_LINUX}"
    else
      lupin_entry "${OS}" "${version}" recovery \
		  "single nomodeset ${GRUB_CMDLINE_LINUX}"
    fi
  fi

  list=`echo $list | tr ' ' '\n' | grep -vx $linux | tr '\n' ' '`
  is_first_entry=false
done

# If at least one kernel was found, then we need to
# add a closing '}' for the submenu command.
if [ x"$is_first_entry" != xtrue ]; then
  echo '}' >> ${refind_conf}
fi
